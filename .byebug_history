exit
exception
exit
exception
exit
@browser.wait_until { @browser.url.include?('skuId') }
@browser.getCurrentUrl
@browser.url
@browser.wait(5)
@browser.methods - Object.methods
@browser.wait_until(5)
wait_until(5)
Watir::Wait.until { @browser.url.include?('skuId') }
@browser.url.include?('skuId')
@browser.url.include?(/spm/)
@browser.url.includes?(/spm/)
@browser.url.match(/spm/)
@browser.url
Watir::Wait.until { 2 == 2 }
@browser.url
@browser.url[:sku_id]
browser.url[:sku_id]
continue
variant.as.first.click
exit
exception
exit
exception
exit
params = CGI.parse(@browser.url)
@browser.url
exit
exception
exit
exception
exit
variant.as.first.click
prop_hash
exit
exception
exit
@variants.each { |v| p v['sku_id']}
@variants.last['sku_id']
@variants.last
@variants.count
exception
exit
exception
exit
@browser.url
params = CGI.parse(@browser.url)
 prop_hash['sku_id'].nil?
continue
@id_tries
sleep(0.5)
prop_hash['sku_id'].nil?
continue
prop_hash['sku_id'].nil? && @id_tries < 4
@id_tries
prop_hash['sku_id'].nil?
exit
exception
exit
exception.backtrace
exception
continue
variant.as.first.click
variant.as.first.html
variant.as.first
variant.html
variant
exit
@variants.count
exit
exception
exit
xit
exception
exception.backtrace
exit
prop_hash
sku_id
@sku_prices[sku_id]
exit
exception.backtrace
exception
exit
price['promotionListt']
price['promotionList'][0]['price']
price['promotionList'][0]
price['promotionList'].count
price['promotionList']
price
exit
exception.backtrace
exception.methods - Object.methods
exception
continue
@product.attributes['variants'].first
exit
@product.attributes['variants'].first
@product.attributes
exit
prop_hash
exit
prop_hash
exit
continue
prop_hash
exit
@sku_prices[sku_id]
@sku_prices[sku_id]['promo_price']
sku_id = prop_hash['sku_id']
prop_hash
exit
@sku_prices[sku_id]
sku_id = prop_hash['sku_id']
@sku_prices.empty?
prop_hash
continue
sku_prices
exit
exception
exit
sku_prices
exit
prices.first[1]['price']
prices.first['price']
prices.first[1]['promotionList'][0]['price'].to_f
prices.first[1]['promotionList'][0]['price']
prices.first[1]['promotionList'][0]
prices.first[1]['promotionList']
prices.first.class
prices.first
prices.first['promotionList']
prices.each {|sku, price| p "#{sku} - #{price['price']}"}
prices.count
exit
response['defaultModel']['itemPriceResultDO']['priceInfo'].each {|sku, price| p "#{sku} - #{price['price']}"}
response['defaultModel']['itemPriceResultDO']['priceInfo'].each {|sku, price| p "#{sku} - #{price['price']}}
response['defaultModel']['itemPriceResultDO']['priceInfo'].each {|sku, price| p sku, price['price']}
response['defaultModel']['itemPriceResultDO']['priceInfo'].each {|sku, price| p sku}
response['defaultModel']['itemPriceResultDO']['priceInfo'].each {|sku, price| p sku, price.price}
response['defaultModel']['itemPriceResultDO']['priceInfo']
response['defaultModel']['itemPriceResultDO']
response['defaultModel']
response
exit
response
exit
response
exit
response
exit
response
exit
response.parsed_response['defaultModel']
response.parsed_response
response
exit
data
exit
data
exit
@variants
exit
res.parsed_response['trans_result'].first['dst']
res.parsed_response['trans_result'].first
res.parsed_response['trans_result']
res.code
res
exit
res
exit
res
exit
res
exit
url
res
exit
res
exit
sign
res
exit
url
res
exit
url
res
exit
url
res
continue
res
exit
url
res
continue
@product.variants.first
continue
@product.images.first
continue
product_img == variant_img
exit
src.split('/products/').second.split('?').first.split('600x600q90').first + '600x600q90.jpg'
src.split('/products/').second.split('?').first.split('600x600q90')
src.split('/products/').second.split('?').first
variant_img.split(/\/uploaded\/.*\//).second.sub('!!', '_')
variant_img.split(/\/uploaded\/.*\//)
variant_img.split(/\/uploaded\/.*\//).sub('!!', '_')
variant_img.split(/\/uploaded\/.*\//)
variant_img
src.split('/products/').second.split('?').first
src.split('/products/')
src = product_img.src
variant_img
product_img.src
product_img
exit
@product.images.first.prop
@product.images.first
@product.images
continue
product.images.first.id
product.images.first
product.variants.first.send('option1')
product.variants.first['option1']
product.variants.first.option1
product.variants.option1
product.variants.first
product.options.first.name
product.options.count
product.options
image.test
image
image.test = 'test'
image = product.images.first
product.images.first
@variant_images
product.errors.messages.empty?
product.errors.messages
product.errors
@variant_images
product.images.first
product.images
 product.save
product.attributes['images']
continue
product.variants
@variant_images
product.images.first
product.save
product.attributes['images']
continue
