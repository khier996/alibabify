exit
exception
exit
@current_url
continue
url
@variants
exit
@variant_images
@product.errors
@product.errors.messages
@product
url
@variants
exception.backtrace
exception
exit
continue
level >= props.count - 1
exit
props.count
level
continue
@variant_images
exit
level
continue
@variant_images.length
@variant_images
level
continue
level
continue
@variant_images
level
continue
@variant_images
level
exit
@variant_images.length
@variant_images
exception
exit
@variant_images
exit
@variant_images
exception.backtrace
exception
continue
exit
continue
urls.map {|_, url| url}
urls
continue
params.select { |param, value| param.match(/url_\d*/) }
params.select { |param, value| param.match?(/url_\d*/) }
params
params.select {|param| return true}
params.to_a
params.each {|param, value| p param}
params.each {|param| p param}
params.count
params
continue
params
continue
params
continue
continue'
params
continue
params
continue
params
continue
exit
Product.last.variants.last
 @shopify_product =  ShopifyAPI::Product.find(:all)
ShopifyAPI::Base.site
@shopify_product
 @shopify_product =  ShopifyAPI::Product.find(db_product.shopify_product_id)
exit
ShopifyAPI::Product.find(db_product.shopify_product_id)
exit
ShopifyAPI::Product.find(db_product.shopify_product_id)
exit
ShopifyAPI::Product.find(102532251656)exit
ShopifyAPI::Product.find(102532251656)
db_product.shopify_product_id
ShopifyAPI::Product.new
ShopifyAPI::Product.methods - Object.methods
ShopifyAPI::Product
ShopifyAPI::Product.find(:all)
ShopifyAPI::Product.find(db_product.shopify_product_id)
exit
ShopifyAPI::Product.find(db_product.shopify_product_id)
exit
ShopifyAPI::Product.find(exitdb_product.shopify_product_id)
db_product.shopify_product_id
ShopifyAPI::Product.find(id: db_product.shopify_product_id)
ShopifyAPI::Product.find(id: db_product.shopify_product_id.to_i)
ShopifyAPI::Product.find(db_product.shopify_product_id.to_i)
ShopifyAPI::Product.find(db_product.shopify_product_id)
exit
ShopifyAPI::Product.find(db_product.shopify_product_id.to_i)
ShopifyAPI::Product.find(db_product.shopify_product_id)
db_product
continue
new_image = ShopifyAPI::Image.create(new_image)
continue
new_image2.variant_ids
new_image2 = ShopifyAPI::Image.create(new_image)
new_image
exit
new_image.errors
new_image
exit
new_image.errors
new_image.errors.messages
new_image.errors.message
new_image
continue
new_image = ShopifyAPI::Image.create(new_image)
new_image
continue
new_image = ShopifyAPI::Image.create(new_image)
new_image
exit
new_image = ShopifyAPI::Image.create(new_image)
@product.variants.find(1284544135176)
new_image
exit
@product.variants.first.send(option)
@product.variants.first[option]
@product.variants.first
option
exit
@translated_props
@product.variants.first
@product.images.count
@product.id
@variant_images
exit
exception.backtrace
exception
exit
exception
exit
@variant_images
@product_images
exit
exception
exit
variant_image = ShopifyAPI::Image.create(@variant_img)
@variant_img['variant_ids'] = [new_variant.id]
@variant_img['product_id'] = @shopify_product.id
@shopify_product.id
@variant_img
new_variant
exit
new_variant
exit
varianttt = ShopifyAPI::Variant.create(variant.attributes)
varianttt = ShopifyAPI::Variant.create({variant.attributes})
v = ShopifyAPI::Variant.create({variant.attributes})
variant.save
variant
variant.errors.messages
variant
variant.errors.methods - Object.methods
variant.errors.methdos - Object.methods
variant.errors
variant.errors.errors
variant.errors
variant.attributes['product_id']
variant.attributes.product_id
@shopify_product.id
variant
variant.save
variant
@shopify_product.variants.first
variant
variant.errors.messages
variant.save
variant.attributes = new_variant
new_variant
variant = ShopifyAPI::Variant.new
ShopifyAPI::Variant.find(1279992594440)
@shopify_product.variants.last
@shopify_product.errors.messages
@shopify_product.save
@shopify_product.variants.last
@shopify_product.variants.count
@shopify_product.errors.messages
@shopify_product.save
@shopify_product.errors.messages
@shopify_product.errors
@shopify_product.save
@shopify_product.variants << new_variant
@shopify_product.options[1]
@shopify_product.options[0]
@shopify_product.options
shopify_product.options
new_variant
exit
'option' + 1
new_variant
exit
variant.patch_unparsed_sku(sku_info, shopify_product)
sku_info = sku_infos[variant.sku]
sku_infos = SkuInfoFetcher.fetch(product.taobao_product_id)
variant = product.variants.parsed.first
variant = variant.parsed.first
shopify_product = ShopifyAPI::Product.find(product.shopify_product_id)
exit
variant.patch_unparsed_sku(sku_info, shopify_product)
sku_info = sku_infos[variant.sku]
variant = product.variants.first
sku_info = sku_infos[variant.sku]
sku_info = @sku_infos[variant.sku]
sku_infos = SkuInfoFetcher.fetch(product.taobao_product_id)
product.id
sku_infos = SkuInfoFetcher.fetch(product.id)
variant = product.variants.parsed.first
variant = product.variants.parsed.last
variant = product.variants.parsed.count
variant = product.variants.unparsed
variant = product.variants.unparsed.first
shopify_product = ShopifyAPI::Product.find(product.shopify_product_id)
exit
variant = product.variants.unparsed.first
shopify_product = ShopifyAPI::Product.find(product.shopify_product_id)
product = Product.last
exit
Product.last
prop.css('span').text
prop.css('span')
prop.text.gsub(/\n已选中/, '')
prop.text
prop
props[1].css('a').first.attributes['style'].value
props[1].css('a').first.attributes['style']
props[1].css('a').first.attributes
props[1].css('a')
props[1].css('a').attributes('style')
props[1].css('a')
props.second.css('a')
props.count
prop.css('a')
prop.css('a').first.attributes['style']
prop.text.gsub(/\n已选中/, '')
prop
exit
prop.parent.attributes['data-property'].value
arr.map {|num, index| index}
arr = [10, 20, 30]
