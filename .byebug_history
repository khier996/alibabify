continue
new_image = ShopifyAPI::Image.create(new_image)
continue
new_image2.variant_ids
new_image2 = ShopifyAPI::Image.create(new_image)
new_image
exit
new_image.errors
new_image
exit
new_image.errors
new_image.errors.messages
new_image.errors.message
new_image
continue
new_image = ShopifyAPI::Image.create(new_image)
new_image
continue
new_image = ShopifyAPI::Image.create(new_image)
new_image
exit
new_image = ShopifyAPI::Image.create(new_image)
@product.variants.find(1284544135176)
new_image
exit
@product.variants.first.send(option)
@product.variants.first[option]
@product.variants.first
option
exit
@translated_props
@product.variants.first
@product.images.count
@product.id
@variant_images
exit
exception.backtrace
exception
exit
exception
exit
@variant_images
@product_images
exit
exception
exit
variant_image = ShopifyAPI::Image.create(@variant_img)
@variant_img['variant_ids'] = [new_variant.id]
@variant_img['product_id'] = @shopify_product.id
@shopify_product.id
@variant_img
new_variant
exit
new_variant
exit
varianttt = ShopifyAPI::Variant.create(variant.attributes)
varianttt = ShopifyAPI::Variant.create({variant.attributes})
v = ShopifyAPI::Variant.create({variant.attributes})
variant.save
variant
variant.errors.messages
variant
variant.errors.methods - Object.methods
variant.errors.methdos - Object.methods
variant.errors
variant.errors.errors
variant.errors
variant.attributes['product_id']
variant.attributes.product_id
@shopify_product.id
variant
variant.save
variant
@shopify_product.variants.first
variant
variant.errors.messages
variant.save
variant.attributes = new_variant
new_variant
variant = ShopifyAPI::Variant.new
ShopifyAPI::Variant.find(1279992594440)
@shopify_product.variants.last
@shopify_product.errors.messages
@shopify_product.save
@shopify_product.variants.last
@shopify_product.variants.count
@shopify_product.errors.messages
@shopify_product.save
@shopify_product.errors.messages
@shopify_product.errors
@shopify_product.save
@shopify_product.variants << new_variant
@shopify_product.options[1]
@shopify_product.options[0]
@shopify_product.options
shopify_product.options
new_variant
exit
'option' + 1
new_variant
exit
variant.patch_unparsed_sku(sku_info, shopify_product)
sku_info = sku_infos[variant.sku]
sku_infos = SkuInfoFetcher.fetch(product.taobao_product_id)
variant = product.variants.parsed.first
variant = variant.parsed.first
shopify_product = ShopifyAPI::Product.find(product.shopify_product_id)
exit
variant.patch_unparsed_sku(sku_info, shopify_product)
sku_info = sku_infos[variant.sku]
variant = product.variants.first
sku_info = sku_infos[variant.sku]
sku_info = @sku_infos[variant.sku]
sku_infos = SkuInfoFetcher.fetch(product.taobao_product_id)
product.id
sku_infos = SkuInfoFetcher.fetch(product.id)
variant = product.variants.parsed.first
variant = product.variants.parsed.last
variant = product.variants.parsed.count
variant = product.variants.unparsed
variant = product.variants.unparsed.first
shopify_product = ShopifyAPI::Product.find(product.shopify_product_id)
exit
variant = product.variants.unparsed.first
shopify_product = ShopifyAPI::Product.find(product.shopify_product_id)
product = Product.last
exit
Product.last
prop.css('span').text
prop.css('span')
prop.text.gsub(/\n已选中/, '')
prop.text
prop
props[1].css('a').first.attributes['style'].value
props[1].css('a').first.attributes['style']
props[1].css('a').first.attributes
props[1].css('a')
props[1].css('a').attributes('style')
props[1].css('a')
props.second.css('a')
props.count
prop.css('a')
prop.css('a').first.attributes['style']
prop.text.gsub(/\n已选中/, '')
prop
exit
prop.parent.attributes['data-property'].value
arr.map {|num, index| index}
arr = [10, 20, 30]
ShopifyAPI::Product.count
self.product.taobao_product_id.to_i
shopify_product = ShopifyAPI::Product.find(self.product.taobao_product_id.to_i)
self.product
shopify_product = ShopifyAPI::Product.find(self.product.taobao_product_id)
product_id
@shopify_product.variants.count
props.first.parent.attributes['data-property'].value
props.first.parent.attributes['data-property']
props.first.parent
props.first.methods - Object.methods
props.methods - Object.methods
props.first
props.count
exit
url
continue
sku_infos
exit
quantities.first.second['quantity']
quantities.first.second
quantities.first['3195851195067']
quantities.first['quantity']
quantities.first
sku_infos
exit
response.parsed_response['defaultModel']['inventoryDO']['skuQuantity']
response.parsed_response['defaultModel']['inventoryDO']
response.parsed_response['defaultModel']['InventoryDO']
response.parsed_response['defaultModel']
continue
Variant.last
continue
saved_skus
saved_skus.include?(sku)
sku
continue
 @sku_prices.first
saved_skus = @product.variants.map { |variant| variant.sku }
continue
res.parsed_response
exit
res.parsed_response
res.code
res.code < 400
res
continue
res
exception.backtrace
exception
exit
continue
@product.variants.first.compare_at_price
@product.variants.first.price
@product.variants.first.sku
@product.variants.first.sku_id
@product.variants.first
@taobao_i
@product.id
@product.original_title
@product.original_title = @original_title
@product.original_title = @original_title.strip
@product.original_title = @original_title
@product.title
exit
exception
exit
exception
exit
@browser.wait_until { @browser.url.include?('skuId') }
@browser.getCurrentUrl
@browser.url
@browser.wait(5)
@browser.methods - Object.methods
@browser.wait_until(5)
wait_until(5)
Watir::Wait.until { @browser.url.include?('skuId') }
@browser.url.include?('skuId')
@browser.url.include?(/spm/)
@browser.url.includes?(/spm/)
@browser.url.match(/spm/)
@browser.url
Watir::Wait.until { 2 == 2 }
@browser.url
@browser.url[:sku_id]
browser.url[:sku_id]
continue
variant.as.first.click
exit
exception
exit
exception
exit
params = CGI.parse(@browser.url)
@browser.url
exit
exception
exit
exception
exit
variant.as.first.click
prop_hash
exit
exception
exit
@variants.each { |v| p v['sku_id']}
@variants.last['sku_id']
